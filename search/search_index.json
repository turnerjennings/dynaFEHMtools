{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DynaFEHMtools","text":"<p>Extract head injury metrics from LS-DYNA binary output files.  This package contains functions for subsetting the binary array structures (dynafehmtools), as well as functions for calculating injury metrics (dynafehmtools.injurymetrics).  The objective of this package is to provide convenient data reduction for head injury analysis to reduce storage and file transfer requirements (e.g., in an HPC environment)</p>"},{"location":"#installation","title":"Installation","text":"<p>Download repo and install locally using pip/docker/etc.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>dynafehmtools\n| - D3plot subsetting functions\n| - dynafehmtools.injurymetrics\n|   |- Head injury metric calculations\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Below is an example script using the dynaFEHMtools framework to calculate the intracranial pressure for each element in the brain model of the THUMS v7 Finite Element Head Model.  The script also calculates the quantiles of pressure and writes both to output files. </p> <pre><code>import dynaFEHMtools as FM\nimport dynaFEHMtools.injurymetrics as IM\nfrom lasso.dyna import D3plot\nimport numpy as np\n\n#define part set for brain parts\nbrain=FM.THUMS_brain_set()\n\n\n#load d3plot\narray_filter=[\"element_solid_stress\",\"element_solid_strain\",\"part_internal_energy\",\"node_displacement\"]\nd3plot = D3plot(input_path, buffered_reading=True,state_array_filter=array_filter)\n\n# define arrays of element and node ids\nelement_solid_indices = d3plot.arrays[\"element_solid_node_indexes\"]\n\n# create array of part IDs for each element\nelement_solid_part_ids = FM.element_part_ids(d3plot,format=\"solid\")\n\n# find elements that belong to the brain part set\nbrain_elements = FM.elements_in_part_set(element_solid_part_ids, brain)\n\n# calculate intracranial pressure\npressure = IM.element_pressure(d3plot, brain_elements)\n\n#calculate pressure quantiles\np99 = np.quantile(pressure, 0.99, axis=1)\np95 = np.quantile(pressure, 0.95, axis=1)\np05 = np.quantile(pressure, 0.05, axis=1)\np01 = np.quantile(pressure, 0.01, axis=1)\npout = np.stack((p99, p95, p05, p01), axis=1)\n\n# save outputs\nnp.savetxt(savepath + name + \"_pressure.csv\", pressure, delimiter=\",\", fmt=\"%e\")\nnp.savetxt(savepath + name + \"_pressurestats.csv\", pout, delimiter=\",\", fmt=\"%e\")\n</code></pre>"},{"location":"fehm/","title":"DynaFEHMtools","text":"<p>The root package contains basic functions for subsetting the binary output arrays and eliminating unnecessary data from later intensive calculations (e.g., principal stresses/strains).</p>"},{"location":"fehm/#thums_brain_set","title":"THUMS_brain_set","text":"<p>Define a list with the part numbers for the THUMS v7 brain model.</p> <pre><code>def THUMS_brain_set(offset=0):\n\nbrain=THUMS_brain_set()\n</code></pre> <p>inputs</p> Attribute Type Description offset int Integer to default part numbers if offsetting was applied during keyword input definition <p>returns</p> <p>List of part numbers constituting THUMS white/gray matter</p>"},{"location":"fehm/#thums_skull_sets","title":"THUMS_skull_sets","text":"<p>Define a list with the part numbers for the THUMS v7 brain model.</p> <pre><code>def THUMS_skull_sets(offset=0):\n\nskull_solid, skull_shell=THUMS_skull_sets()\n</code></pre> <p>inputs</p> Attribute Type Description offset int Integer to default part numbers if offsetting was applied during keyword input definition <p>returns</p> <ul> <li>List of part numbers for solid parts in THUMS skull</li> <li>List of part numbers for shell parts in THUMS skull</li> </ul>"},{"location":"fehm/#element_part_ids","title":"element_part_ids","text":"<p>Returns a numpy array with dimensions [n_elements,1] with the part number associated with each element.  This routine can be run for solid or shell elements.</p> <pre><code>def element_part_ids(plotobject,format=\"solid\"):\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\nshell_part_ids=element_part_ids(d3plot,\"shell\")\n</code></pre> <p>inputs</p> Attribute Type Description plotobject lasso.dyna.D3plot D3plot or D3part file being evaluated format String Type of element to evaluate, either \"solid\" or \"shell\" <p>returns</p> <p>Numpy array containing part number of each element.</p>"},{"location":"fehm/#elements_in_part_set","title":"elements_in_part_set","text":"<p>Subsets a list of elements to only contain elements defined by a part set.  Requires prior definition of element part ids (see element_part_id function above).</p> <pre><code>def elements_in_part_set(element_part_ids, part_list):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\nshell_part_ids=element_part_ids(d3plot,\"shell\")\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n</code></pre> <p>inputs</p> Attribute Type Description element_part_ids numpy.ndarray List of part numbers for each solid/shell element in the database part_list list[int] List of parts to subset <p>returns</p> <p>Array containing the indices of each element in the part subset.</p>"},{"location":"fehm/#nodes_in_element_list","title":"nodes_in_element_list","text":"<p>Finds the unique nodes associated with a list of elements</p> <pre><code>def nodes_in_element_list(element_list, element_indices):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nnode_indices=d3plot.arrays[\"Element_solid_node_indexes\"]\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\nbrain_nodes=nodes_in_element_list(brain_elements,node_indices)\n</code></pre> <p>inputs</p> Attribute Type Description element_list numpy.ndarray List of elements to search for nodes element_indices numpy.ndarray Nodal connectivity table for all elements of chosen type <p>returns</p> <p>Array containing the indices of each node connected to the specified set of elements.</p>"},{"location":"fehm/#element_list_volume_history","title":"element_list_volume_history","text":"<p>Calculates the volume of each element in a given list over the timesteps in the binary file.</p> <pre><code>def element_list_volume_history(element_indices, node_coordinates, type=\"solid\",thickness=None):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nnode_indices=d3plot.arrays[\"Element_solid_node_indexes\"]\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\nnode_history = d3plot.arrays[\"node_displacement\"]\n\nbrain_volume_history = element_list_volume_history(node_indices[brain_elements, :], node_history)\n</code></pre> <p>inputs</p> Attribute Type Description element_indices numpy.ndarray Nodal connectivity table for all elements which volume calculation is desired node_coordinates numpy.ndarray Time history of the position of each node type string Element type, \"solid\" or \"shell\" thickness float Element thickness, must be specified if type=\"shell\" <p>returns</p> <p>Array with dimensions [n_timesteps,n_elements] containing the volume of each element in the given subset.</p>"},{"location":"fehm/#element_centroids","title":"element_centroids","text":"<p>Calculates the centroid location of each element at every timestep.</p> <pre><code>def element_centroids(object, element_set):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\ncentroids=element_centroids(d3plot,brain_elements)\n</code></pre> <p>inputs</p> Attribute Type Description object lasso.dyna.D3plot binary plot object element_set numpy.ndarray subset of elements to evaluate centroid history on <p>returns</p> <p>Array with dimensions [n_timesteps,n_elements_in_set,3] containing the x,y,z position of the element centroid for each timestep.</p>"},{"location":"injurymetrics/","title":"DynaFEHMtools.injurymetrics","text":"<p>The injury metrics package contains the calculations for different conventional head injury metrics.</p>"},{"location":"injurymetrics/#element_pressure","title":"element_pressure","text":"<p>Calculates the hydrostatic pressure (i.e., intracranial pressure) for a given list of elements</p> <pre><code>def element_pressure(object, element_set, type=\"solid\", state_subset=None):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\nicp=element_pressure(d3plot, brain_elements)\n</code></pre> <p>inputs</p> Attribute Type Description object lasso.dyna.D3plot Binary plot object to evaluate element_set numpy.ndarray Array of element indices to evaluate pressure on type string element type being evaluated, options are \"solid\", \"shell\", or \"tshell\" state_subset numpy.ndarray array of timesteps to evaluate pressure at if a subset of the total time is desired <p>returns</p> <p>Array with dimensions [n_timesteps, n_elements] containing the pressure of each element.</p>"},{"location":"injurymetrics/#mps_mss","title":"mps_mss","text":"<p>Returns the principal and maximum shear stresses or strains for a given subset of elements at the timesteps specified.</p> <pre><code>def mps_mss(object, element_set, stressstrain=\"stress\",type=\"solid\",state_subset=None):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\nmpstress, msstress=mps_mss(d3plot, brain_elements, stressstrain=\"stress\")\nmpstrain, msstrain=mps_mss(d3plot, brain_elements, stressstrain=\"strain\")\n</code></pre> <p>inputs</p> Attribute Type Description object lasso.dyna.D3plot Binary plot object to evaluate element_set numpy.ndarray Array of element indices to evaluate principal stresses/strains on stressstrain string Specify whether stress or strain will be evaluated, options are \"stress\" or \"strain\" type string element type being evaluated, options are \"solid\", \"shell\", or \"tshell\" state_subset numpy.ndarray array of timesteps to evaluate principal stresses/strains at if a subset of the total time is desired <p>returns</p> <ul> <li>Array with dimensions [n_timesteps, n_elements, 3] containing the principal stresses/strains of each element in the subset at the given time points.  Principal values are in descending order.</li> <li>Array with dimensions [n_timesteps, n_elements, 1] containing the maximum shear stress/strain of each element in the subset at the given time points.</li> </ul>"},{"location":"injurymetrics/#von_mises","title":"von_mises","text":"<p>Returns the von mises stresses for a given subset of elements at the timesteps specified.</p> <pre><code>def von_mises(object, element_set, state_subset=None):\n\nbrain_parts=THUMS_brain_set()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\nvmstress=von_mises(d3plot,brain_elements)\n</code></pre> <p>inputs</p> Attribute Type Description object lasso.dyna.D3plot Binary plot object to evaluate element_set numpy.ndarray Array of element indices to evaluate von mises stress on state_subset numpy.ndarray array of timesteps to evaluate von mises stress at if a subset of the total time is desired <p>returns</p> <p>Array with dimensions [n_timesteps, n_elements] containing the von mises stress of each element in the subset at the given time points.  </p>"},{"location":"injurymetrics/#internal_energy","title":"internal_energy","text":"<p>Returns the internal energy for a given part set.</p> <pre><code>def internal_energy(object, partset, state_subset=None):\n\nskull_solid, skull_shell=THUMS_skull_sets()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_energy=internal_energy(d3plot,skull_solid)\nshell_energy=internal_energy(d3plot,skull_shell)\n</code></pre> <p>inputs</p> Attribute Type Description object lasso.dyna.D3plot Binary plot object to evaluate part_set list[int] Array of part numbers to evaluate internal energy on state_subset numpy.ndarray array of timesteps to evaluate internal energy at if a subset of the total time is desired <p>returns</p> <p>Array with dimensions [n_timesteps, n_parts] containing the internal energy of each part in the subset at the given time points.  </p>"},{"location":"injurymetrics/#internal_energy_1","title":"internal_energy","text":"<p>Calculates Cumulative Strain Damage Measures for a given set of elements.  Requires prior calculation of principal strains and volume history.</p> <pre><code>def csdm(MPS, volume):\n\nskull_solid, skull_shell=THUMS_skull_sets()\n\nd3plot=D3plot(\"path/to/\")\n\nsolid_part_ids=element_part_ids(d3plot,\"solid\")\n\nbrain_elements=elements_in_part_set(solid_part_ids,brain_parts)\n\nmpstress, msstress=mps_mss(d3plot, brain_elements, stressstrain=\"stress\")\nmpstrain, msstrain=mps_mss(d3plot, brain_elements, stressstrain=\"strain\")\n\nnode_history = d3plot.arrays[\"node_displacement\"]\n\nbrain_volume_history = element_list_volume_history(node_indices[brain_elements, :], node_history)\n\nsurvival, csdm15, csdm25, VSM=csdm(mpstrain,brain_volume_history)\n\n</code></pre> <p>inputs</p> Attribute Type Description MPS numpy.ndarray Array containing the principal strain history of a specified element set volume numpy.ndarray Array containing teh volume history of a specified element set <p>returns - Float representing the volume fraction of elements which exceeded a maximum principal strain of 0.15 - Float representing the volume fraction of elements which exceeded a maximum principal strain of 0.25 - Float representing the Volume Strain Metric - Array of dimensions [1000,1] representing the volume fraction of elements which exceeded specified strain thresholds. </p>"}]}